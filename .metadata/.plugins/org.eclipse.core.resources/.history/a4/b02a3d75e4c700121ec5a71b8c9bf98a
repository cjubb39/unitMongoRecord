import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Parser {

	public static final String snExtract = "\\s*\\d+-\\d+-(\\d+)\\s*";

	public static double[][] analyze(File inFile, String lotIndicator) {
		Scanner input = null;
		ArrayList<Unit> units = new ArrayList<Unit>();
		float chTCR, crTCR, rhTCR;
		float chNull, crNull, rhNull;
		float lin, hyst, nullSet, nfsoSet;
		int SN;

		double[][] outputReadings = null;

		try {
			input = new Scanner(inFile);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		// Set-up scanner preferences
		input.useDelimiter(System.getProperty("line.separator"));
		//input.useDelimiter("\n");
/*System.out.println(input.next() + "\n");
System.exit(0);*/

		// look for first serial number
		while (!input.hasNext("\\s*" + lotIndicator + ".*")) {
			input.next();
		}
		
		Matcher snMatcher = Pattern.compile(snExtract).matcher(input.next());

		// extract SN
		if (snMatcher.find()) {
			SN = Integer.parseInt(snMatcher.group(1));
			System.out.println("SN: " + SN);
		}

		// look for single 0
		boolean indicator = false;
		while (!indicator) {
			while (!input.hasNext("\\s*0\\s*")) {
				input.next();
			}

			// make sure more zeros do not follow
			input.next(); // eats first zero

			if (!input.hasNext("\\s*0\\s*")) {
				indicator = true;
			}
		} // should be at first reading (Room Temp at 0 psi)

		outputReadings = new double[4][11];
System.out.println(input.next());
		for (int i = 0; i < 4; i++) {
			double reading = input.nextDouble();
			int j = 0;
System.out.println(reading);
			while (reading < 1000) { // continue up until resistance
										// measurements (which should be >1000)
				outputReadings[i][j] = reading;
				reading = input.nextDouble();
				j++;
			}

			// read until zero
			while (!input.hasNext("\\s*0\\s*")) {
				input.next();
			}

			input.next(); // eat that zero
			// read until not zero
			while (input.hasNext("\\s*0\\s*")){
				input.next();
			} //now on next non-resistor, non-zero value
		}
		
		
		return outputReadings;

	}
}
