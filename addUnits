#!/bin/bash
TESTER_COLLECTION=tester


if [ $# -ne 6 ]; then
	echo "Please use 6 arguments: ./addUnits <rawDataFile> <lotIndicator> <numberOfUnitsToRead> <fluid> <group> <liveWrite?>"
	exit
fi

# #makes sure line breaks are appropriate
# echo "Ensuring file has correct line endings by creating temp file and converting"
# TMPRD=$HOME/$1-unix
# cp $1 $TMPRD

# #covnert to correct line endings
# sed -i 's/\r\n/\n/g' $TMPRD
# sed -i 's/\r/\n/g' $TMPRD

#sets classpath for java to include .class files in different folder
#and use external jar
CLASSPATH=./rawDataParser/commons-math3-3.2.jar:./rawDataParser

echo "Parsing raw data file and creating instructions for mongo shell"
java -cp $CLASSPATH RDParserTester $1 $2 $3 | ./enterUnits $4 $5 > /dev/null

if [ $6 -ne 1 ]; then
	echo "Units will be saved to $TESTER_COLLECTION collection"
	sed -i 's/db.units./db.$TESTER_COLLECTION./g' unitsToAdd.js

	#add to backup record
	cat unitsToAdd.js >> masterTestRecord.js
else
	cat unitsToAdd.js >> masterRecord.js
fi

echo "Adding units to mongodb" 
cat unitsToAdd.js | mongo > /dev/null

#make back-up copies
if [ $6 -ne 1 ]; then
	echo "Backing up tester collection"
	BACKUP_COLLECTION=$TESTER_COLLECTION
else
	echo "Backing up units collection"
	BACKUP_COLLECTION="units"
fi

#create backups
BACKUP_NAME="$BACKUP_COLLECTION"
BACKUP_NAME+="Backup"
echo $BACKUP_COLLECTION
echo $BACKUP_NAME
mongoexport --db oilFluidExp --collection $BACKUP_COLLECTION --csv --fieldFile exportFields --out ./$BACKUP_NAME.csv
mongoexport --db oilFluidExp --collection $BACKUP_COLLECTION --out ./$BACKUP_NAME.json

#echo "Removing temp file created earlier"
#rm $TMPRD