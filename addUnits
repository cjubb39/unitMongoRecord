#!/bin/bash
#STILL NEED TO ADD AUTOMATIC LINE ENDING CONVERSION

#check correct number of arguments
if [ $# -ne 6 ]; then
	echo "Please use 6 arguments: ./addUnits <rawDataFile> <lotIndicator> <numberOfUnitsToRead> <fluid> <group> <liveWrite?>"
	exit
fi

#set variables
TESTER_COLLECTION=tester
PRODUCTION_COLLECTION=units
EXPORT_FIELD_FILE=exportFields

#sets classpath for java to include .class files in different folder and use external jar
JAVA_CLASSPATH=./rawDataParser/commons-math3-3.2.jar:./rawDataParser

#set current collection
if [ $6 -ne 1 ]; then
	CURRENT_COLLECTION=$TESTER_COLLECTION
else
	CURRENT_COLLECTION=$PRODUCTION_COLLECTION
fi

# #makes sure line breaks are appropriate
# echo "Ensuring file has correct line endings by creating temp file and converting"
# TMPRD=$HOME/$1-unix
# cp $1 $TMPRD

# #covnert to correct line endings
# sed -i 's/\r\n/\n/g' $TMPRD
# sed -i 's/\r/\n/g' $TMPRD

# Read in and parse raw data files.  Convert to mongodb commands
echo "Parsing raw data file and creating instructions for mongo shell"
java -cp $JAVA_CLASSPATH RDParserTester $1 $2 $3 | ./enterUnits $4 $5 > /dev/null

# Change mongodb collection (if necessary) and add mongo commands to backups
echo "Units will be added to $CURRENT_COLLECTION collection"
if [ $6 -ne 1 ]; then
	sed -i 's/db.$PRODUCTION_COLLECTION./db.$TESTER_COLLECTION./g' unitsToAdd.js

	#add to backup record
	cat unitsToAdd.js >> masterTestRecord.js
else
	cat unitsToAdd.js >> masterRecord.js
fi

# Add units to database
echo "Adding units to mongodb" 
cat unitsToAdd.js | mongo > /dev/null

#create backups of database
BACKUP_NAME="$CURRENT_COLLECTION"
BACKUP_NAME+="Backup"

mongoexport --db oilFluidExp --collection $CURRENT_COLLECTION --csv --fieldFile $EXPORT_FIELD_FILE --out ./backups/$BACKUP_NAME.csv
mongoexport --db oilFluidExp --collection $CURRENT_COLLECTION --out ./backups/$BACKUP_NAME.json

#echo "Removing temp file created earlier"
#rm $TMPRD